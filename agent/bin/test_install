#!/usr/bin/env bash

set -e

fixture_dir=$PWD/build/fixtures
mkdir -p build/fixtures

source "test/helper.bash"
export ANNOTATION_JAR="$(find_annotation_jar)"

function install_petclinic (
  local repo="$1"; shift
  local oldVersion="$1"
  local pkg="$(basename $repo)"

  cd build/fixtures

  rm -rf "${pkg}"
  git clone https://github.com/"${repo}".git
  cd "${pkg}"

  echo "${JAVA_VERSION}"
  if [[ ! -z $oldVersion ]]; then
    case "${JAVA_VERSION}" in
      1.8*)
        ;&
      11.*)
        git checkout "${oldVersion}"
        ;;
    esac
    ./mvnw --quiet package -DskipTests -Dcheckstyle.skip=true -Dspring-javaformat.skip=true
  else
    case "${JAVA_VERSION}" in
      1.8*)
        ;&
      11.*)
        echo "No old version, not packaging in ${pkg}"
        ;;
      17.*)
        ./mvnw --quiet package -DskipTests -Dcheckstyle.skip=true -Dspring-javaformat.skip=true
        ;;
    esac
  fi
)

# PetClinic now requires Java 17. When we're testing older JDKs, use the last
# version that supported 1.8 (and 11). Note that spring-projects/petclinic
# doesn't tag versions, so we just use the commit SHA. (We don't use the full
# hash, though, because Travis detects that as a secret. :( 8 digits should be
# enough to make a collision extremely unlikely.)
install_petclinic "spring-projects/spring-petclinic" 9cb8dde9
../gradlew :pomupdater:run -PmainClass=com.appland.appmap.util.PomUpdater \
  -PpomFile="$PWD/build/fixtures/spring-petclinic/pom.xml" \
  -PannotationJar="${ANNOTATION_JAR}"

install_petclinic "spring-petclinic/spring-framework-petclinic"

export BATS_DIR="$PWD/build/bats"

install_bats() (
  mkdir -p "$BATS_DIR"
  cd "$BATS_DIR"


  rm -rf bats-core bats-support bats-assert
  git clone --depth 1 https://github.com/bats-core/bats-core.git \
      && git clone --depth 1 https://github.com/bats-core/bats-support.git \
      && git clone --depth 1 https://github.com/bats-core/bats-assert.git \
      && cd bats-core \
      && ./install.sh "$BATS_DIR"
)
if [[ ! -d "$BATS_DIR" ]]; then
  install_bats
fi

export BASHUNIT_DIR="$PWD/build/bashunit"
install_bashunit() (
  mkdir -p "$BASHUNIT_DIR"
  curl -s https://bashunit.typeddevs.com/install.sh | bash -s "$BASHUNIT_DIR"
  sed -ibak 's;#!/bin/bash;#!/usr/bin/env bash;' $BASHUNIT_DIR/bashunit
)
if [[ ! -d "$BASUNIT_DIR" ]]; then
  install_bashunit
fi