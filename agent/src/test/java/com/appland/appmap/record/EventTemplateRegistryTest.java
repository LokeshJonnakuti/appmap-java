/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.appland.appmap.record;

import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import com.appland.appmap.test.util.ClassBuilder;
import com.appland.appmap.util.AppMapClassPool;
import com.appland.appmap.util.ClassPoolExtension;

import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtMethod;

@ExtendWith(ClassPoolExtension.class)
public class EventTemplateRegistryTest {
  private static final EventTemplateRegistry registry = EventTemplateRegistry.get();

  @Test
  public void testRegister() throws Exception {
    ArrayList<CtMethod> behaviorsToRegister = new ArrayList<CtMethod>();
    ClassPool classPool = AppMapClassPool.get();
    CtClass classType = classPool.get("com.appland.appmap.ExampleClass");

    behaviorsToRegister.add(classType.getDeclaredMethod("methodStaticZeroParam"));
    behaviorsToRegister.add(classType.getDeclaredMethod("methodStaticSingleParam"));
    behaviorsToRegister.add(classType.getDeclaredMethod("methodZeroParam"));
    behaviorsToRegister.add(classType.getDeclaredMethod("methodOneParam"));

    for (CtMethod method : behaviorsToRegister) {
      registry.register(method, new String[0]);
    }
  }

  CtClass buildCloneableEventTemplate() throws Exception {
    return new ClassBuilder("testCloneEventTemplateClass")
        .beginMethod()
        .setName("registeredMethod")
        .endMethod()
        .ctClass();
  }

  @Test
  public void testCloneEventTemplate() throws Exception {
    Integer index = registry.register(buildCloneableEventTemplate().getDeclaredMethod("registeredMethod"), new String[0]);
    assertTrue(registry.buildCallEvent(index) != null);
  }

  @Test
  public void testUnknownEventTemplate() throws Exception {
    Assertions.assertThrows(UnknownEventException.class, () -> {
      registry.buildCallEvent(Integer.MAX_VALUE);
    });
  }
}
